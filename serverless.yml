service: shortlinker
frameworkVersion: "3"

provider:
    name: aws
    region: us-east-1
    runtime: nodejs18.x
    environment:
        BCRYPT_SALT_ROUNDS: 1
        DYNAMODB_USER_TABLE: ${self:service}-userTable-${sls:stage}
        DYNAMODB_USER_TABLE_EMAIL_INDEX: ${self:service}-emailIndex-${sls:stage}
        DYNAMODB_SHORTLINK_TABLE: ${self:service}-shortLinkTable-${sls:stage}
        DYNAMODB_SHORTLINK_TABLE_USER_INDEX: ${self:service}-shortLinkUserIndex-${sls:stage}
        DYNAMODB_VIEW_TABLE: ${self:service}-viewTable-${sls:stage}
        DYNAMODB_VIEW_TABLE_LINK_INDEX: ${self:service}-viewTableLinkIndex-${sls:stage}
        JWT_SECRET: jwt_secret_goes_here
        JWT_EXPIRE_IN: 2h
    iamRoleStatements:
        - Effect: Allow
          Action:
              - lambda:InvokeFunction
          Resource: "arn:aws:lambda:${opt:region, self:provider.region}:*:function:${self:functions.verify-jwt.name}"
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource:
              - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USER_TABLE}"
              - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USER_TABLE}/index/${self:provider.environment.DYNAMODB_USER_TABLE_EMAIL_INDEX}"
              - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SHORTLINK_TABLE}"
        - Effect: Allow
          Action:
              - dynamodb:PutItem
          Resource:
              - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USER_TABLE}"
              - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SHORTLINK_TABLE}"
              - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_VIEW_TABLE}"
        - Effect: Allow
          Action:
              - dynamodb:GetItem
          Resource:
              - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SHORTLINK_TABLE}"
        - Effect: Allow
          Action:
              - dynamodb:DeleteItem
          Resource:
              - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SHORTLINK_TABLE}"

package:
    individually: true

functions:
    signup:
        handler: functions/auth/signup.handler
        name: ${self:service}-${sls:stage}-signup
        package:
            patterns:
                - "node_modules/aws-lambda"
                - "node_modules/@aws-sdk/client-dynamodb"
                - "node_modules/bcryptjs"
                - "node_modules/jsonwebtoken"
        events:
            - httpApi: "POST /auth/signup"
    signin:
        handler: functions/auth/signin.handler
        name: ${self:service}-${sls:stage}-signin
        package:
            patterns:
                - "node_modules/aws-lambda"
                - "node_modules/@aws-sdk/client-dynamodb"
                - "node_modules/bcryptjs"
                - "node_modules/jsonwebtoken"
        events:
            - httpApi: "POST /auth/signin"
    verify-jwt:
        handler: functions/auth/verify-jwt.handler
        name: ${self:service}-${sls:stage}-verify-jwt
        package:
            patterns:
                - "node_modules/jsonwebtoken"
    create-link:
        handler: functions/shortlink/create-link.handler
        name: ${self:service}-${sls:stage}-create-link
        package:
            patterns:
                - "node_modules/aws-lambda"
                - "node_modules/@aws-sdk/client-dynamodb"
        events:
            - httpApi: "POST /link"
    redirect-to-link:
        handler: functions/shortlink/redirect-to-link.handler
        name: ${self:service}-${sls:stage}-redirect-to-link
        package:
            patterns:
                - "node_modules/aws-lambda"
                - "node_modules/@aws-sdk/client-dynamodb"
        events:
            - httpApi: "ANY /{linkId}"
    deactivate-link:
        handler: functions/shortlink/deactivate-link.handler
        name: ${self:service}-${sls:stage}-deactivate-link
        package:
            patterns:
                - "node_modules/aws-lambda"
                - "node_modules/@aws-sdk/client-dynamodb"
        events:
            - httpApi: "DELETE /link/{linkId}"

resources:
    Resources:
        UserTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: userId
                      AttributeType: S
                    - AttributeName: email
                      AttributeType: S
                BillingMode: PAY_PER_REQUEST
                KeySchema:
                    - AttributeName: userId
                      KeyType: HASH
                TableName: ${self:provider.environment.DYNAMODB_USER_TABLE}
                GlobalSecondaryIndexes:
                    - IndexName: ${self:provider.environment.DYNAMODB_USER_TABLE_EMAIL_INDEX}
                      KeySchema:
                          - AttributeName: email
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL
        ShortLinkTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: linkId
                      AttributeType: S
                    - AttributeName: userId
                      AttributeType: S
                BillingMode: PAY_PER_REQUEST
                KeySchema:
                    - AttributeName: linkId
                      KeyType: HASH
                TableName: ${self:provider.environment.DYNAMODB_SHORTLINK_TABLE}
                GlobalSecondaryIndexes:
                    - IndexName: ${self:provider.environment.DYNAMODB_SHORTLINK_TABLE_USER_INDEX}
                      KeySchema:
                          - AttributeName: userId
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL
        ViewTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: linkId
                      AttributeType: S
                    - AttributeName: viewId
                      AttributeType: S
                BillingMode: PAY_PER_REQUEST
                KeySchema:
                    - AttributeName: viewId
                      KeyType: HASH
                TableName: ${self:provider.environment.DYNAMODB_VIEW_TABLE}
                GlobalSecondaryIndexes:
                    - IndexName: ${self:provider.environment.DYNAMODB_VIEW_TABLE_LINK_INDEX}
                      KeySchema:
                          - AttributeName: linkId
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL

plugins:
    - serverless-esbuild
    - serverless-offline

custom:
    esbuild:
        bundle: true
        minify: true
